Components
    = (preprocessorLine / __ )+
      components:Component+
      (__)*
      '#endif'
      _?
    {
        return components
    }
    

Component
    = !__ component:(ComponentDef) __*
    {
         return component
    }

ComponentDef
    = "struct" _? name:($(!(':' / ' ').)*) _? ": public Component {" _*
         "static CID cid;" _*
            members:((!'};') memberList _*)*
        "};"
    {
            return {
                    name: name,
                    members: members
                            .map(_ => _[1])
                            .filter(member => { return member.type !== "IGNORE" })
                            .reduce((prev, member) => {
                              return Object.assign({}, prev, {
                                [member.name]: member,
                              });
                            }, {}),
            }
    }

preprocessorLine
    = '#' (!__.)* __
    {
        return {
            type: 'IGNORE',
        }
    }    

memberList
    = (property / comment / method)

property
    = property:("int" / "TileLayer" / "string" / "SDL_Texture" / "EID" / "bool" )
        " "
        pointer:"*"?
        name:($(!(';' / ' = ').)*)
        value:(' = ' ($(!';'.)*))?
        ';'
    {
         const v = value? value[1] : null;
         return {
                type: property,
                pointer: !!(pointer),
                value: (property === 'bool') ? (v === 'true') : v,
                name: name,
        }
    }

comment
    = "//" comment:($(!__.)*) __?
    {
         return {
                type: "IGNORE",
                line: comment,
        }
    }

method
    = line:($(!'}'.)*) '}' ';'?
    {
         return {
                type: "IGNORE",
                line: line,
        }
    }

_ = ' ' / __

__ = '\n' / '\t'
